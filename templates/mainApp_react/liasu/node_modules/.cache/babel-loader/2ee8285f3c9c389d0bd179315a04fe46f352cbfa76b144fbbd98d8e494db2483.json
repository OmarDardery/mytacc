{"ast":null,"code":"async function validateUser(id, password) {\n  try {\n    const response = await fetch(`/api/auth/`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json' // Let the backend know you're sending JSON data\n      },\n      body: JSON.stringify({\n        id,\n        password\n      }) // Send the ID in the request body\n    });\n    if (!response.ok) {\n      // If HTTP response is not OK (status is not 2xx)\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    return await response.json(); // Parse JSON response\n  } catch (error) {\n    // Handle network or other errors\n    console.error('Error during validation request:', error.message);\n    return {\n      authenticated: false,\n      message: error.message\n    }; // Return an object with authentication status and error message\n  }\n}\nexport default validateUser;","map":{"version":3,"names":["validateUser","id","password","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","json","error","console","message","authenticated"],"sources":["C:/mytacc/templates/mainApp/liasu/src/component/functions/validateUser.js"],"sourcesContent":["async function validateUser(id, password) {\r\n  try {\r\n    const response = await fetch(`/api/auth/`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json', // Let the backend know you're sending JSON data\r\n      },\r\n      body: JSON.stringify({ id, password }), // Send the ID in the request body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // If HTTP response is not OK (status is not 2xx)\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    return await response.json(); // Parse JSON response\r\n\r\n  } catch (error) {\r\n    // Handle network or other errors\r\n    console.error('Error during validation request:', error.message);\r\n    return { authenticated: false, message: error.message }; // Return an object with authentication status and error message\r\n  }\r\n}\r\n\r\nexport default validateUser;"],"mappings":"AAAA,eAAeA,YAAYA,CAACC,EAAE,EAAEC,QAAQ,EAAE;EACxC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,YAAY,EAAE;MACzCC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB,CAAE;MACtC,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,EAAE;QAAEC;MAAS,CAAC,CAAC,CAAE;IAC1C,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB;MACA,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;IAC3D;IAEA,OAAO,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC,CAAC,CAAC;EAEhC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACE,OAAO,CAAC;IAChE,OAAO;MAAEC,aAAa,EAAE,KAAK;MAAED,OAAO,EAAEF,KAAK,CAACE;IAAQ,CAAC,CAAC,CAAC;EAC3D;AACF;AAEA,eAAehB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}