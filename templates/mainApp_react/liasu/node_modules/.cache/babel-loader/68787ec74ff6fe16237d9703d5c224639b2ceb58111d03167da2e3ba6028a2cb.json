{"ast":null,"code":"const validateEmail=async email=>{try{const response=await fetch(`/api/send-code/`,{method:'POST',// GET request\nheaders:{'Content-Type':'application/json'// Let the backend know you're sending JSON data\n},body:JSON.stringify({email})// Send the ID in the request body\n});if(!response.ok){// If HTTP response is not OK (status is not 2xx)\nthrow new Error(`HTTP error! Status: ${response.status}`);}const data=await response.json();// Parse JSON response\nreturn data;}catch(error){// Handle network or other errors\nconsole.error('Error during validation request:',error.message);}return false;// Return false if validation fails or an error occurs\n};export default validateEmail;","map":{"version":3,"names":["validateEmail","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","message"],"sources":["C:/mytacc/templates/mainApp/liasu/src/component/functions/sendCode.js"],"sourcesContent":["const validateEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`/api/send-code/`, {\r\n      method: 'POST', // GET request\r\n      headers: {\r\n        'Content-Type': 'application/json', // Let the backend know you're sending JSON data\r\n\r\n      },\r\n        body: JSON.stringify({ email }), // Send the ID in the request body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // If HTTP response is not OK (status is not 2xx)\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json(); // Parse JSON response\r\n    return data;\r\n  } catch (error) {\r\n    // Handle network or other errors\r\n    console.error('Error during validation request:', error.message);\r\n  }\r\n  return false; // Return false if validation fails or an error occurs\r\n};\r\n\r\nexport default validateEmail;"],"mappings":"AAAA,KAAM,CAAAA,aAAa,CAAG,KAAO,CAAAC,KAAK,EAAK,CACrC,GAAI,CACF,KAAM,CAAAC,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,iBAAiB,CAAE,CAC9CC,MAAM,CAAE,MAAM,CAAE;AAChBC,OAAO,CAAE,CACP,cAAc,CAAE,kBAAoB;AAEtC,CAAC,CACCC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAAC,CAAEP,KAAM,CAAC,CAAG;AACrC,CAAC,CAAC,CAEF,GAAI,CAACC,QAAQ,CAACO,EAAE,CAAE,CAChB;AACA,KAAM,IAAI,CAAAC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC,CAC3D,CAEA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAE;AACpC,MAAO,CAAAD,IAAI,CACb,CAAE,MAAOE,KAAK,CAAE,CACd;AACAC,OAAO,CAACD,KAAK,CAAC,kCAAkC,CAAEA,KAAK,CAACE,OAAO,CAAC,CAClE,CACA,MAAO,MAAK,CAAE;AAChB,CAAC,CAED,cAAe,CAAAhB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}