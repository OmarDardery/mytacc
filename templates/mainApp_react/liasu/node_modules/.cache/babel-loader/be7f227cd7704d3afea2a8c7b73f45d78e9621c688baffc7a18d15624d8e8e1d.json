{"ast":null,"code":"import getCookie from \"./getCookie\";\nconst validateEmail = async email => {\n  try {\n    const response = await fetch(`/api/send-code/`, {\n      method: 'POST',\n      // GET request\n      headers: {\n        'Content-Type': 'application/json',\n        // Let the backend know you're sending JSON data\n        'X-CSRFToken': getCookie(\"csrftoken\")\n      },\n      body: JSON.stringify({\n        email\n      }) // Send the ID in the request body\n    });\n    if (!response.ok) {\n      // If HTTP response is not OK (status is not 2xx)\n      throw new Error(`HTTP error! Status: ${response.status}`);\n    }\n    const data = await response.json(); // Parse JSON response\n    return data;\n  } catch (error) {\n    // Handle network or other errors\n    console.error('Error during validation request:', error.message);\n  }\n  return false; // Return false if validation fails or an error occurs\n};\nexport default validateEmail;","map":{"version":3,"names":["getCookie","validateEmail","email","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","error","console","message"],"sources":["C:/mytacc/templates/mainApp/liasu/src/component/functions/sendCode.js"],"sourcesContent":["import getCookie from \"./getCookie\";\r\nconst validateEmail = async (email) => {\r\n  try {\r\n    const response = await fetch(`/api/send-code/`, {\r\n      method: 'POST', // GET request\r\n      headers: {\r\n        'Content-Type': 'application/json', // Let the backend know you're sending JSON data\r\n        'X-CSRFToken': getCookie(\"csrftoken\"),\r\n\r\n      },\r\n        body: JSON.stringify({ email }), // Send the ID in the request body\r\n    });\r\n\r\n    if (!response.ok) {\r\n      // If HTTP response is not OK (status is not 2xx)\r\n      throw new Error(`HTTP error! Status: ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json(); // Parse JSON response\r\n    return data;\r\n  } catch (error) {\r\n    // Handle network or other errors\r\n    console.error('Error during validation request:', error.message);\r\n  }\r\n  return false; // Return false if validation fails or an error occurs\r\n};\r\n\r\nexport default validateEmail;"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AACnC,MAAMC,aAAa,GAAG,MAAOC,KAAK,IAAK;EACrC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;MAC9CC,MAAM,EAAE,MAAM;MAAE;MAChBC,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAAE;QACpC,aAAa,EAAEN,SAAS,CAAC,WAAW;MAEtC,CAAC;MACCO,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEP;MAAM,CAAC,CAAC,CAAE;IACrC,CAAC,CAAC;IAEF,IAAI,CAACC,QAAQ,CAACO,EAAE,EAAE;MAChB;MACA,MAAM,IAAIC,KAAK,CAAC,uBAAuBR,QAAQ,CAACS,MAAM,EAAE,CAAC;IAC3D;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;IACpC,OAAOD,IAAI;EACb,CAAC,CAAC,OAAOE,KAAK,EAAE;IACd;IACAC,OAAO,CAACD,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAACE,OAAO,CAAC;EAClE;EACA,OAAO,KAAK,CAAC,CAAC;AAChB,CAAC;AAED,eAAehB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}